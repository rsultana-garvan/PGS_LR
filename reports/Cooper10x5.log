Traceback (most recent call last):
  File "/Users/rsultana/conda-intel/envs/sklearn/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/rsultana/conda-intel/envs/sklearn/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/rsultana/conda-intel/envs/sklearn/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/rsultana/conda-intel/envs/sklearn/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/rsultana/conda-intel/envs/sklearn/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/Users/rsultana/conda-intel/envs/sklearn/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/rsultana/conda-intel/envs/sklearn/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/rsultana/conda-intel/envs/sklearn/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import matplotlib.pyplot as plt
import os, sys, warnings
import numpy as np
import pandas as pd
import statistics as st
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_auc_score, auc, RocCurveDisplay
from sklearn.model_selection import GridSearchCV, RepeatedKFold, StratifiedKFold
from sklearn.exceptions import ConvergenceWarning


def plot_ROCs(name, bp, X, y): {
    # Runs classifier with cross-validation and plots ROC curves
    #
    # Parameters:
    # name (str): Name of the dataset - used for the plot title and .csv files
    # bp (dict): Dictionary with best parameter values for LogisticRegression()
    # X (DataFrame): dataframe with sample features
    # y (array): array with response variable

    cv = RepeatedKFold(n_splits=10, n_repeats=5, random_state=42)
    classifier = LogisticRegression(C=bp['C'], max_iter=bp['max_iter'], l1_ratio=bp['l1_ratio'], random_state=42,
          solver='saga', n_jobs=-1, penalty='elasticnet')

    tprs = []
    aucs = []
    mean_fpr = np.linspace(0, 1, 100)

    plt.rcParams['figure.figsize'] = [14, 12]
    fig, ax = plt.subplots()
    for i, (train, test) in enumerate(cv.split(X, y)):
        classifier.fit(X.iloc[train,], y.iloc[train])
        viz = RocCurveDisplay.from_estimator(
            classifier,
            X.iloc[test,],
            y.iloc[test],
            name=f"ROC fold {i + 1}",
            alpha=0.2,
            lw=1,
            ax=ax,
        )
        interp_tpr = np.interp(mean_fpr, viz.fpr, viz.tpr)
        interp_tpr[0] = 0.0
        tprs.append(interp_tpr)
        aucs.append(viz.roc_auc)
        X_header = np.array(X.columns)
        data_array = np.vstack((X_header, classifier.coef_[0,:]))
        model_coefs = pd.DataFrame(data=data_array.T, columns=['SNP', 'Coefficient'])
        m_name = f'data/{name}_5fold_repeat{i+1:02}_coefficients.txt'
        model_coefs.to_csv(m_name, sep='\t',index=False)

    ax.plot([0, 1], [0, 1], linestyle="--", lw=2, color="r", label="Chance", alpha=0.8)

    classifier.fit(X, y)
    viz = RocCurveDisplay.from_estimator(
        classifier,
        X,
        y,
        name=f"In-sample ROC",
        alpha=0.6,
        color="k",
        lw=2,
        ax=ax,
    )

    mean_tpr = np.mean(tprs, axis=0)
    mean_tpr[-1] = 1.0
    mean_auc = auc(mean_fpr, mean_tpr)
    std_auc = np.std(aucs)
    ax.plot(
        mean_fpr,
        mean_tpr,
        color="b",
        label=r"Mean ROC (AUC = %0.2f $\pm$ %0.2f)" % (mean_auc, std_auc),
        lw=2,
        alpha=0.6,
    )

    std_tpr = np.std(tprs, axis=0)
    tprs_upper = np.minimum(mean_tpr + std_tpr, 1)
    tprs_lower = np.maximum(mean_tpr - std_tpr, 0)
    ax.fill_between(
        mean_fpr,
        tprs_lower,
        tprs_upper,
        color="grey",
        alpha=0.4,
        label=r"$\pm$ 1 std. dev.",
    )

    ax.set(
        xlim=[-0.05, 1.05],
        ylim=[-0.05, 1.05],
        title=f"Receiver operating characteristic for {name} samples",
    )
    ax.legend(loc="lower right", fontsize='xx-small'
    )
    plt.show()
}
------------------

[0;36m  Cell [0;32mIn [1], line 21[0;36m[0m
[0;31m    cv = RepeatedKFold(n_splits=10, n_repeats=5, random_state=42)[0m
[0m    ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax. Maybe you meant '==' or ':=' instead of '='?

SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='? (109483350.py, line 21)

